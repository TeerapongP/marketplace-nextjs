datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma

model User {
  userId      Int      @id @default(autoincrement())
  userName    String   @unique // Ensure userName is unique
  password    String
  firstName   String?
  lastName    String?
  email       String?   @unique
  phoneNumber String?   @unique
  address     String?
  userImage   String?

  roleId      Int
  role        Role     @relation(fields: [roleId], references: [roleId])

  // Relationships
  payments    Payment[]
  orders      Order[]
  carts       Cart[]

  @@map("User")  // Maps the model name "User" to the table name "User" in the database
}


model Role {
  roleId      Int      @id @default(autoincrement())
  roleName    String

  // Relationships
  users       User[]
  menus       Menu[]
  reserveSpaces ReserveSpace[]

  @@map("Role")  // Maps the model name "Role" to the table name "Role" in the database
}

model Menu {
  menuId      Int      @id @default(autoincrement())
  menuName    String
  menuUrl     String

  roleId      Int
  role        Role     @relation(fields: [roleId], references: [roleId])

  @@map("Menu")  // Maps the model name "Menu" to the table name "Menu" in the database
}

model Payment {
  paymentId    Int      @id @default(autoincrement())
  paymentDate  DateTime @default(now())
  paymentMethod String
  amount       Float

  userId       Int
  user         User     @relation(fields: [userId], references: [userId])

  @@map("Payment")  // Maps the model name "Payment" to the table name "Payment" in the database
}

model Order {
  orderId     Int      @id @default(autoincrement())
  orderDate   DateTime @default(now())
  totalPrice  Float

  userId      Int
  user        User     @relation(fields: [userId], references: [userId])
  
  // Relationships
  orderItems  OrderItem[]
  shipments   Shipment[]

  @@map("Order")  // Maps the model name "Order" to the table name "Order" in the database
}

model OrderItem {
  orderItemId Int      @id @default(autoincrement())
  orderDate   DateTime @default(now())
  totalPrice  Float

  orderId     Int
  order       Order    @relation(fields: [orderId], references: [orderId])

  productId   Int
  product     Product  @relation(fields: [productId], references: [productId])

  @@map("OrderItem")  // Maps the model name "OrderItem" to the table name "OrderItem" in the database
}

model Shipment {
  shipmentId   Int      @id @default(autoincrement())
  shipmentDate DateTime @default(now())
  address      String
  city         String
  state        String
  country      String
  zipCode      String

  orderId      Int
  order        Order    @relation(fields: [orderId], references: [orderId])

  @@map("Shipment")  // Maps the model name "Shipment" to the table name "Shipment" in the database
}

model Product {
  productId   Int      @id @default(autoincrement())
  description String
  price       Float
  stock       Int

  // Relationships
  categoryId  Int
  category    Category @relation(fields: [categoryId], references: [categoryId])
  carts       Cart[]

  @@map("Product")  // Maps the model name "Product" to the table name "Product" in the database
  OrderItem OrderItem[]
}

model Category {
  categoryId Int      @id @default(autoincrement())
  name       String

  // Relationships
  products   Product[]

  @@map("Category")  // Maps the model name "Category" to the table name "Category" in the database
}

model Cart {
  cartId    Int      @id @default(autoincrement())
  quantity  Int

  userId    Int
  user      User     @relation(fields: [userId], references: [userId])

  productId Int
  product   Product  @relation(fields: [productId], references: [productId])

  @@map("Cart")  // Maps the model name "Cart" to the table name "Cart" in the database
}

model Space {
  spaceId     Int      @id @default(autoincrement())
  spaceLocation String
  pricePerDay Float

  // Relationships
  reserveSpaces ReserveSpace[]

  @@map("Space")  // Maps the model name "Space" to the table name "Space" in the database
}

model ReserveSpace {
  reserveSpaceId Int      @id @default(autoincrement())
  reserveDate    DateTime @default(now())
  status         String
  roleId         Int
  role           Role     @relation(fields: [roleId], references: [roleId])
  spaceId        Int
  space          Space    @relation(fields: [spaceId], references: [spaceId])

  @@map("ReserveSpace")  // Maps the model name "ReserveSpace" to the table name "ReserveSpace" in the database
}
