datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma

model User {
  userId      Int     @id @default(autoincrement())
  userName    String  @unique // Ensure userName is unique
  password    String
  firstName   String?
  lastName    String?
  email       String  @unique
  phoneNumber String?
  address     String?
  userImage   String?

  roleId Int
  role   Role @relation(fields: [roleId], references: [roleId])

  // Relationships
  orders        Order[] // A user can have multiple orders
  carts         Cart[] // A user can have multiple carts
  shops         Shop[] // A user can have multiple shops
  reserveSpaces ReserveSpace[] // A user can have multiple reserved spaces
  accounts      Account[] // A user can have multiple accounts

  createdAt DateTime @default(now()) // Optional timestamp for creation
  updatedAt DateTime @updatedAt // Optional timestamp for last update

  @@map("User") // Maps the model name "User" to the table name "User" in the database
}

model Account {
  accountId         String  @id @default(cuid()) // Unique account identifier
  userId            Int
  roleId            Int? // Ensure this line exists
  type              String // Type of the account (e.g., social, local, etc.)
  provider          String // Provider name (e.g., Google, Facebook)
  providerAccountId String // Unique account ID from the provider
  refresh_token     String? @db.Text // Token for refreshing session
  access_token      String? @db.Text // Token for accessing account
  expires_at        Int? // Expiration time of the access token
  token_type        String? // Type of the token
  scope             String? // Scope of the access
  id_token          String? @db.Text // ID token for authentication
  session_state     String? // State of the session

  user User  @relation(fields: [userId], references: [userId], onDelete: Cascade) // Relationship to User
  role Role? @relation(fields: [roleId], references: [roleId], onDelete: NoAction, onUpdate: NoAction) // Optional relationship to Role with NoAction

  @@unique([provider, providerAccountId]) // Ensure each provider/account combination is unique
}

model Role {
  roleId   Int    @id @default(autoincrement())
  roleName String @unique // Ensure roleName is unique

  // Relationships
  users         User[] // A role can have multiple users
  reserveSpaces ReserveSpace[] // A role can have multiple reserved spaces
  menus         Menu[]         @relation("MenuRoles") // Relationship to menus

  accounts Account[] // A role can have multiple accounts

  @@map("Role") // Maps the model name "Role" to the table name "Role" in the database
}

model Menu {
  menuId   Int    @id @default(autoincrement())
  menuName String
  menuUrl  String

  roles Role[] @relation("MenuRoles")

  @@map("Menu") // Maps the model name "Menu" to the table name "Menu" in the database
}

model Order {
  orderId    Int      @id @default(autoincrement())
  orderDate  DateTime @default(now())
  totalPrice Float

  userId Int
  user   User @relation(fields: [userId], references: [userId])

  // Relationships
  orderItems OrderItem[]
  shipments  Shipment[]

  @@map("Order") // Maps the model name "Order" to the table name "Order" in the database
}

model OrderItem {
  orderItemId Int      @id @default(autoincrement())
  orderDate   DateTime @default(now())
  totalPrice  Float

  orderId   Int
  quantity  Int // Add this line if it's missing
  productId Int
  order     Order   @relation(fields: [orderId], references: [orderId], onUpdate: NoAction, onDelete: NoAction)
  product   Product @relation(fields: [productId], references: [productId], onUpdate: NoAction, onDelete: NoAction)

  @@map("OrderItem")
}

model Shipment {
  shipmentId     Int      @id @default(autoincrement())
  shipmentDate   DateTime @default(now())
  name           String
  lastName       String
  address        String
  city           String
  state          String
  country        String
  zipCode        String
  trackingNumber String // Make sure this line exists
  orderId        Int
  order          Order    @relation(fields: [orderId], references: [orderId])

  @@map("Shipment")
}

model Product {
  productId   Int    @id @default(autoincrement())
  productName String // New field
  description String
  price       Float
  stock       Int
  images      String

  // Relationships
  categoryId Int
  category   Category    @relation(fields: [categoryId], references: [categoryId])
  shopId     Int
  shop       Shop        @relation(fields: [shopId], references: [shopId])
  carts      Cart[]
  OrderItem  OrderItem[]

  @@map("Product")
}

model Category {
  categoryId Int    @id @default(autoincrement())
  name       String

  // Relationships
  products Product[]

  @@map("Category") // Maps the model name "Category" to the table name "Category" in the database
}

model Cart {
  cartId    Int     @id @default(autoincrement())
  quantity  Int
  userId    Int
  user      User    @relation(fields: [userId], references: [userId], onUpdate: NoAction, onDelete: NoAction)
  productId Int
  product   Product @relation(fields: [productId], references: [productId], onUpdate: NoAction, onDelete: NoAction)

  @@map("Cart")
}

model Shop {
  shopId          Int     @id @default(autoincrement())
  shopName        String
  shopDescription String
  shopImages      String
  status          Boolean

  ownerId       Int // Foreign key for the user who owns the shop
  owner         User           @relation(fields: [ownerId], references: [userId])
  products      Product[] // A shop can have multiple products
  reserveSpaces ReserveSpace[]

  @@map("Shop")
}

model Space {
  spaceId       Int            @id @default(autoincrement())
  spaceLocation String
  pricePerDay   Float
  images        String // or String[]
  status        Boolean?
  // Relationships
  reserveSpaces ReserveSpace[] // Relation to ReserveSpace

  @@map("Space") // Maps the model name "Space" to the table name "Space" in the database
}

model ReserveSpace {
  reserveSpaceId Int      @id @default(autoincrement())
  reserveDate    DateTime @default(now())
  status         Boolean
  roleId         Int
  spaceId        Int
  userId         Int // Ensure this field exists
  shopId         Int?

  role  Role  @relation(fields: [roleId], references: [roleId], onUpdate: NoAction, onDelete: NoAction)
  space Space @relation(fields: [spaceId], references: [spaceId], onUpdate: NoAction, onDelete: NoAction)
  user  User  @relation(fields: [userId], references: [userId], onUpdate: NoAction, onDelete: NoAction) // Change Cascade to NoAction
  shop  Shop? @relation(fields: [shopId], references: [shopId])

  @@map("ReserveSpace")
}
